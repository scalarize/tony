#!/usr/bin/env php
<?php declare(strict_types=1);
/** vim: set noet ts=4 sw=4 fdm=indent: */

set_time_limit(0);
ini_set('display_errors', 'on');
ini_set('memory_limit', '1024m');

require 'vendor/autoload.php';

require_once 'RecordClassFinder.php';
require_once 'DBCallFinder.php';

use PhpParser\{Node, NodeFinder};
use PhpParser\{Parser, ParserFactory};
use TonyParser\{RecordClassFinder, ClassInfo, Warning, DBCallFinder};

function usage() {
	global $argv;
	echo "Usage: ./$argv[0] -t <target_file_or_dir> -m [mode] -r [search_root]\n";
}

$args = getopt('t:m:r:');
$target = $args['t'];
$root = $args['r'] ? $args['r'] : $target;
$mode = empty($args['m']) ? 'plain' : $args['m'];

if (empty($target)) {
	usage();
	exit;
}

echo "finding sql commands ... \n";
$finder = new DBCallFinder($target, $root);
$finder->traverse();
$dbCalls = $finder->getDBCalls();
echo "  found " . count($dbCalls) . " sql commands ... \n";

foreach ($dbCalls as $dbCall) {
	print_r($dbCall);
}

echo "finding record classes ... \n";
$finder = new RecordClassFinder($target);
$recordClasses = $finder->findRecordClasses();
echo "  found " . count($recordClasses) . " record classes ... \n";

$tables = [];
foreach ($recordClasses as $name => $classInfo) {
	$possibleTableNames = [];
	$dbNames = $classInfo->getYiiDBNames();
	if (empty($dbNames)) {
		if (empty($classInfo->getChildren())) {
			Warning::addWarning($classInfo->getFileName(), $name, $classInfo, 'cannot find dbName for non-inherited record class: ' . $classInfo->getClassName());
		}
	}
	$tableNames = $classInfo->getYiiTableNames();
	if (empty($tableNames)) {
		if (empty($classInfo->getChildren())) {
			Warning::addWarning($classInfo->getFileName(), $name, $classInfo, 'cannot find tableName for non-inherited record class: ' . $classInfo->getClassName());
		}
	} else {
		foreach ($dbNames as $dbName) {
			foreach ($tableNames as $tableName) {
				$possibleTableNames []= $dbName . '.' . $tableName;
			}
		}
		foreach ($possibleTableNames as $possibleTableName) {
			if (!isset($tables[$possibleTableName])) {
				$tables[$possibleTableName] = [];
			}
			$tables[$possibleTableName] []= $classInfo;
		}
	}
	$info = sprintf("=== %s ===\n  file: %s\n  hierarchy: -> %s\n  table(s): %s\n",
				$name, $classInfo->getFileName(), implode(' -> ', $classInfo->getAncestorNames()), implode(', ', $possibleTableNames));
	echo $info;
}

foreach ($tables as $name => $classInfos) {
	$classNames = [];
	foreach ($classInfos as $classInfo) {
		$classNames []= $classInfo->getClassName();
	}
	$info = sprintf("=== %s ===\n  classes: %s\n",
		$name, implode(',', $classNames));
	echo $info;
}

foreach (Warning::getWarnings() as $warn) {
	$info = $warn->getExpr($mode);
	echo $info;
}

